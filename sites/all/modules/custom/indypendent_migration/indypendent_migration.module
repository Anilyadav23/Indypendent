<?php

/**
 * @file
 * You must implement hook_migrate_api(), setting the API level to 2, for
 * your migration classes to be recognized by the Migrate module.
 */

function indypendent_migration_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}

class IndypendentArticleMigration extends Migration {
  public function __construct() {
    parent::__construct(MigrateGroup::getInstance('indypendent'));
    $this->description = t('Indypendent Articles');

    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'id' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'size' => 'big',
        )
      ),
      MigrateDestinationNode::getKeySchema()
    );

    $query = db_select('wp_articles', 'wpa')
             ->fields('wpa', array('id', 'post_author', 'post_date', 'post_content', 'post_title', 'post_status', 'comment_status', 'post_modified', 'author', 'post_url', 'category', 'tags', 'issue_id'));

    $this->source = new MigrateSourceSQL($query);
    
    // Set up our destination - nodes of type issue
    $this->destination = new MigrateDestinationNode('article');

    // Mapped fields
    $this->addFieldMapping('title', 'post_title');
    $this->addFieldMapping('uid', 'post_author')
         ->sourceMigration('IndypendentUser')
         ->defaultValue(1);
    $this->addFieldMapping('created', 'post_date');
    $this->addFieldMapping('changed', 'post_modified');
    $this->addFieldMapping('status', 'post_status');
    $this->addFieldMapping('comment', 'comment_status');
    $this->addFieldMapping('body', 'post_content')
         ->arguments(array('format' => 'full_html'));
    $this->addFieldMapping('path', 'post_url');
    $this->addFieldMapping('pathauto')
         ->defaultValue(1);
    $this->addFieldMapping('field_authors', 'author')
         ->separator(',')
         ->arguments(array('create_term' => TRUE));
    $this->addFieldMapping('field_topics', 'tags')
         ->separator(',')
         ->arguments(array('create_term' => TRUE));
    $this->addFieldMapping('field_section', 'category')
         ->separator(',');
    $this->addFieldMapping('field_issue', 'issue_id');

    // No unmapped source fields

    // Unmapped destination fields
    $this->addUnmigratedDestinations(array('revision_uid', 'is_new', 'promote', 'revision', 'language', 'sticky', 'field_feature_image', 'field_excerpt', 'field_subheader'));
  }
}

class IndypendentBlogMigration extends Migration {
  public function __construct() {
    parent::__construct(MigrateGroup::getInstance('indypendent'));
    $this->description = t('Indypendent Blog Posts');

    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'id' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'size' => 'big',
        )
      ),
      MigrateDestinationNode::getKeySchema()
    );

    $query = db_select('wp_blogs', 'wpb')
             ->fields('wpb', array('id', 'post_author', 'post_date', 'post_content', 'post_title', 'post_status', 'comment_status', 'post_modified', 'author', 'post_url', 'tags'));

    $this->source = new MigrateSourceSQL($query);
    
    // Set up our destination - nodes of type issue
    $this->destination = new MigrateDestinationNode('blog_post_indyblog');

    // Mapped fields
    $this->addFieldMapping('title', 'post_title');
    $this->addFieldMapping('uid', 'post_author')
         ->sourceMigration('IndypendentUser')
         ->defaultValue(1);
    $this->addFieldMapping('created', 'post_date');
    $this->addFieldMapping('changed', 'post_modified');
    $this->addFieldMapping('status', 'post_status');
    $this->addFieldMapping('comment', 'comment_status');
    $this->addFieldMapping('body', 'post_content')
         ->arguments(array('format' => 'full_html'));
    $this->addFieldMapping('path', 'post_url');
    $this->addFieldMapping('pathauto')
         ->defaultValue(1);
    $this->addFieldMapping('field_authors', 'author')
         ->separator(',')
         ->arguments(array('create_term' => TRUE));
    $this->addFieldMapping('field_topics', 'tags')
         ->separator(',')
         ->arguments(array('create_term' => TRUE));

    // No unmapped source fields

    // Unmapped destination fields
    $this->addUnmigratedDestinations(array('revision_uid', 'is_new', 'promote', 'revision', 'language', 'sticky', 'field_feature_image', 'field_excerpt'));
  }
}


class IndypendentIssueMigration extends Migration {
  public function __construct() {
    parent::__construct(MigrateGroup::getInstance('indypendent'));
    $this->description = t('Indypendent Issues');

    $this->map = new MigrateSQLMap($this->machineName,
      array(
        'issue_number' => array(
          'type' => 'int',
          'not null' => TRUE,
          'size' => 'small',
        )
      ),
      MigrateDestinationNode::getKeySchema()
    );

    $query = db_select('wp_issues', 'wpi')
             ->fields('wpi', array('issue_number', 'issue_date_from', 'issue_date_to', 'issue_pdf', 'issue_cover'));

    $this->source = new MigrateSourceSQL($query);
    
    // Set up our destination - nodes of type issue
    $this->destination = new MigrateDestinationNode('issue');

    // Mapped fields
    $this->addFieldMapping('title', 'issue_number');
    $this->addFieldMapping('uid')
         ->defaultValue(1);
    $this->addFieldMapping('pathauto')
         ->defaultValue(0);
    $this->addFieldMapping('comment')
         ->defaultValue(0);
         
    $this->addFieldMapping('field_issue_date', 'issue_date_from');
    
    $this->addFieldMapping('field_issue_pdf', 'issue_pdf')
         ->arguments(array('file_function' => 'file_copy', 'file_replace' => FILE_EXISTS_REPLACE));
    $this->addFieldMapping('field_issue_cover', 'issue_cover')
         ->arguments(array('file_function' => 'file_copy', 'file_replace' => FILE_EXISTS_REPLACE));

    // No unmapped source fields

    // Unmapped destination fields
    $this->addUnmigratedDestinations(array('created', 'changed', 'status',
      'promote', 'revision', 'language', 'sticky', 'revision_uid', 'is_new', 'path', 'body'));
  }
  
  public function prepareRow($current_row) {
    // An advanced feature of the date field handler is that in addition to the
    // basic (from) date itself, we can add additional properties like timezone,
    // encapsulating them as JSON.

    // The date range field can have multiple values
    $date_data = array(
      'from' => (string)$current_row->issue_date_from,
      'to' => (string)$current_row->issue_date_to,
    );
      $current_row->issue_date_from = drupal_json_encode($date_data);
    }
}

class IndypendentUserMigration extends Migration {
  public function __construct() {
    parent::__construct(MigrateGroup::getInstance('indypendent'));
    $this->description = t('Indypendent CMS Users');
    $this->map = new MigrateSQLMap($this->machineName,
        array('id' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'size' => 'big',
                'not null' => TRUE,
                )
             ),
        MigrateDestinationUser::getKeySchema()
    );    
    $query = db_select('wp_users', 'wpu')
             ->fields('wpu', array('id', 'user_login', 'user_pass', 'user_nicename', 'user_email', 'user_url', 'user_registered', 'user_activation_key', 'user_status', 'display_name'))
             ->condition('id', 1, '>');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationUser();
    
    // One good way to organize your mappings is in three groups - mapped fields,
    // unmapped source fields, and unmapped destination fields

    // Mapped fields

    $this->addFieldMapping('uid', 'ID');
    $this->addFieldMapping('name', 'user_login');
    $this->addFieldMapping('pass', 'user_pass');
    $this->addFieldMapping('mail', 'user_email');
    $this->addFieldMapping('created', 'user_registered');
    $this->addFieldMapping('roles')
         ->defaultValue(2);

    // Unmapped source fields
    $this->addUnmigratedSources(array('user_nicename', 'user_url', 'user_activation_key', 'user_status', 'display_name'));

    // Unmapped destination fields

    // This is a shortcut you can use to mark several destination fields as DNM
    // at once
    $this->addUnmigratedDestinations(array('theme', 'signature', 'signature_format', 'access',
      'login', 'status', 'timezone', 'language', 'picture', 'init', 'data'));
  }
}

class IndypendentBlogCommentMigration extends Migration {
  public function __construct() {
    parent::__construct();
    $this->description = 'IndypendentBlog Comments';
    $this->map = new MigrateSQLMap($this->machineName,
      array('comment_id' => array(
            'type' => 'int',
            'not null' => TRUE,
            'size' => 'big',
            'unsigned' => TRUE,
           )
         ),
      MigrateDestinationComment::getKeySchema()
    );
    $query = db_select('wp_comments', 'wpc')
             ->fields('wpc', array('comment_id', 'comment_post_id', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_date', 'comment_content', 'comment_approved'));
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationComment('comment_node_blog_post_indyblog');

    // Mapped fields
    
    $this->addFieldMapping('created', 'comment_date');
    $this->addFieldMapping('status', 'comment_approved');
    $this->addFieldMapping('name', 'comment_author');
    $this->addFieldMapping('mail', 'comment_author_email');
    $this->addFieldMapping('homepage', 'comment_author_url');
    $this->addFieldMapping('comment_body', 'comment_content');
    $this->addFieldMapping('nid', 'comment_post_id')
         ->sourceMigration('IndypendentBlog');

    // We preserved bid => nid ids during BeerNode import so simple mapping suffices.

    // No unmapped source fields

    // Unmapped destination fields
    $this->addUnmigratedDestinations(array('pid', 'uid', 'subject', 'hostname', 'changed', 'thread', 'language', 'path'));
  }
  public function prepareRow($row) {
    if(strlen($row->comment_author) > 60) {
      $row->comment_author = substr($row->comment_author, 0, 60);
    }
    if(strlen($row->comment_author_email) > 64) {
      $row->comment_author_email = substr($row->comment_author_email, 0, 64);
    }
  }
}

class IndypendentArticleCommentMigration extends Migration {
  public function __construct() {
    parent::__construct();
    $this->description = 'IndypendentArticle Comments';
    $this->map = new MigrateSQLMap($this->machineName,
      array('comment_id' => array(
            'type' => 'int',
            'not null' => TRUE,
            'size' => 'big',
            'unsigned' => TRUE,
           )
         ),
      MigrateDestinationComment::getKeySchema()
    );
    $query = db_select('wp_comments', 'wpc')
             ->fields('wpc', array('comment_id', 'comment_post_id', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_date', 'comment_content', 'comment_approved'));
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationComment('comment_node_article');

    // Mapped fields
    
    $this->addFieldMapping('created', 'comment_date');
    $this->addFieldMapping('status', 'comment_approved');
    $this->addFieldMapping('name', 'comment_author');
    $this->addFieldMapping('mail', 'comment_author_email');
    $this->addFieldMapping('homepage', 'comment_author_url');
    $this->addFieldMapping('comment_body', 'comment_content');
    $this->addFieldMapping('nid', 'comment_post_id')
         ->sourceMigration('IndypendentArticle');

    // We preserved bid => nid ids during BeerNode import so simple mapping suffices.

    // No unmapped source fields

    // Unmapped destination fields
    $this->addUnmigratedDestinations(array('pid', 'uid', 'subject', 'hostname', 'changed', 'thread', 'language', 'path'));
  }
  public function prepareRow($row) {
    if(strlen($row->comment_author) > 60) {
      $row->comment_author = substr($row->comment_author, 0, 60);
    }
    if(strlen($row->comment_author_email) > 64) {
      $row->comment_author_email = substr($row->comment_author_email, 0, 64);
    }
  }
}